{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport entropy from '@stdlib/stats-base-dists-discrete-uniform-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-discrete-uniform-kurtosis';\nimport mean from '@stdlib/stats-base-dists-discrete-uniform-mean';\nimport median from '@stdlib/stats-base-dists-discrete-uniform-median';\nimport skewness from '@stdlib/stats-base-dists-discrete-uniform-skewness';\nimport stdev from '@stdlib/stats-base-dists-discrete-uniform-stdev';\nimport variance from '@stdlib/stats-base-dists-discrete-uniform-variance';\nimport cdf from '@stdlib/stats-base-dists-discrete-uniform-cdf';\nimport logcdf from '@stdlib/stats-base-dists-discrete-uniform-logcdf';\nimport logpmf from '@stdlib/stats-base-dists-discrete-uniform-logpmf';\nimport mgf from '@stdlib/stats-base-dists-discrete-uniform-mgf';\nimport pmf from '@stdlib/stats-base-dists-discrete-uniform-pmf';\nimport quantile from '@stdlib/stats-base-dists-discrete-uniform-quantile';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction discreteUniformCDF( x ) {\n\treturn cdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction discreteUniformLogCDF( x ) {\n\treturn logcdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the natural logarithm of the probability mass function (logPMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n*/\nfunction discreteUniformLogPMF( x ) {\n\treturn logpmf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction discreteUniformMGF( t ) {\n\treturn mgf( t, this.a, this.b );\n}\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n*/\nfunction discreteUniformPMF( x ) {\n\treturn pmf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction discreteUniformQuantile( p ) {\n\treturn quantile( p, this.a, this.b );\n}\n\n\n// MAIN //\n\n/**\n* Discrete uniform distribution constructor.\n*\n* @constructor\n* @param {integer} [a=0] - minimum support\n* @param {integer} [b=1] - maximum support\n* @throws {TypeError} `a` must be an integer\n* @throws {TypeError} `b` must be an integer\n* @throws {RangeError} `a` must be less than `b`\n* @returns {DiscreteUniform} distribution instance\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 0, 1 );\n*\n* var y = discreteUniform.cdf( 0.8 );\n* // returns 0.5\n*\n* var mu = discreteUniform.mean;\n* // returns 0.5\n*/\nfunction DiscreteUniform() {\n\tvar a;\n\tvar b;\n\tif ( !(this instanceof DiscreteUniform) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new DiscreteUniform();\n\t\t}\n\t\treturn new DiscreteUniform( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\ta = arguments[ 0 ];\n\t\tb = arguments[ 1 ];\n\t\tif ( !isInteger( a ) ) {\n\t\t\tthrow new TypeError( format( '0yb8s', a ) );\n\t\t}\n\t\tif ( !isInteger( b ) ) {\n\t\t\tthrow new TypeError( format( '0yb8t', b ) );\n\t\t}\n\t\tif ( a > b ) {\n\t\t\tthrow new RangeError( format( '0ybDW', a, b ) );\n\t\t}\n\t} else {\n\t\ta = 0;\n\t\tb = 1;\n\t}\n\tdefineProperty( this, 'a', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn a;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isInteger( value ) ) {\n\t\t\t\tthrow new TypeError( format( '0yb8v', value ) );\n\t\t\t}\n\t\t\tif ( value > b ) {\n\t\t\t\tthrow new RangeError( format( '0yb8w', b, value ) );\n\t\t\t}\n\t\t\ta = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'b', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn b;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isInteger( value ) ) {\n\t\t\t\tthrow new TypeError( format( '0yb8v', value ) );\n\t\t\t}\n\t\t\tif ( a > value ) {\n\t\t\t\tthrow new RangeError( format( '0yb8x', a, value ) );\n\t\t\t}\n\t\t\tb = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Discrete uniform distribution differential entropy.\n*\n* @name entropy\n* @memberof DiscreteUniform.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 4, 12 );\n*\n* var v = discreteUniform.entropy;\n* // returns ~2.197\n*/\nsetReadOnlyAccessor( DiscreteUniform.prototype, 'entropy', function get() {\n\treturn entropy( this.a, this.b );\n});\n\n/**\n* Discrete uniform distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof DiscreteUniform.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 4, 12 );\n*\n* var v = discreteUniform.kurtosis;\n* // returns -1.23\n*/\nsetReadOnlyAccessor( DiscreteUniform.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.a, this.b );\n});\n\n/**\n* Discrete uniform distribution expected value.\n*\n* @name mean\n* @memberof DiscreteUniform.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 4, 12 );\n*\n* var v = discreteUniform.mean;\n* // returns 8.0\n*/\nsetReadOnlyAccessor( DiscreteUniform.prototype, 'mean', function get() {\n\treturn mean( this.a, this.b );\n});\n\n/**\n* Discrete uniform distribution median.\n*\n* @name median\n* @memberof DiscreteUniform.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 4, 12 );\n*\n* var v = discreteUniform.median;\n* // returns 8.0\n*/\nsetReadOnlyAccessor( DiscreteUniform.prototype, 'median', function get() {\n\treturn median( this.a, this.b );\n});\n\n/**\n* Discrete uniform distribution skewness.\n*\n* @name skewness\n* @memberof DiscreteUniform.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 4, 12 );\n*\n* var v = discreteUniform.skewness;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( DiscreteUniform.prototype, 'skewness', function get() {\n\treturn skewness( this.a, this.b );\n});\n\n/**\n* Discrete uniform distribution standard deviation.\n*\n* @name stdev\n* @memberof DiscreteUniform.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 4, 12 );\n*\n* var v = discreteUniform.stdev;\n* // returns ~2.582\n*/\nsetReadOnlyAccessor( DiscreteUniform.prototype, 'stdev', function get() {\n\treturn stdev( this.a, this.b );\n});\n\n/**\n* Discrete uniform distribution variance.\n*\n* @name variance\n* @memberof DiscreteUniform.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 4, 12 );\n*\n* var v = discreteUniform.variance;\n* // returns ~6.667\n*/\nsetReadOnlyAccessor( DiscreteUniform.prototype, 'variance', function get() {\n\treturn variance( this.a, this.b );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof DiscreteUniform.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 2, 4 );\n*\n* var v = discreteUniform.cdf( 3.0 );\n* // returns ~0.667\n*/\nsetReadOnly( DiscreteUniform.prototype, 'cdf', discreteUniformCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @name logcdf\n* @memberof DiscreteUniform.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 2, 4 );\n*\n* var v = discreteUniform.logcdf( 2.5 );\n* // returns ~-1.099\n*/\nsetReadOnly( DiscreteUniform.prototype, 'logcdf', discreteUniformLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability mass function (logPMF).\n*\n* @name logpmf\n* @memberof DiscreteUniform.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 2, 4 );\n*\n* var v = discreteUniform.logpmf( 3.0 );\n* // returns ~-1.099\n*/\nsetReadOnly( DiscreteUniform.prototype, 'logpmf', discreteUniformLogPMF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof DiscreteUniform.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 2, 4 );\n*\n* var v = discreteUniform.mgf( 0.5 );\n* // returns ~4.863\n*/\nsetReadOnly( DiscreteUniform.prototype, 'mgf', discreteUniformMGF );\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @name pmf\n* @memberof DiscreteUniform.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 2, 4 );\n*\n* var v = discreteUniform.pmf( 3.0 );\n* // returns ~0.333\n*/\nsetReadOnly( DiscreteUniform.prototype, 'pmf', discreteUniformPMF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof DiscreteUniform.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 2, 4 );\n*\n* var v = discreteUniform.quantile( 0.6 );\n* // returns 3.0\n*/\nsetReadOnly( DiscreteUniform.prototype, 'quantile', discreteUniformQuantile );\n\n\n// EXPORTS //\n\nexport default DiscreteUniform;\n"],"names":["DiscreteUniform","a","b","this","arguments","length","isInteger","TypeError","format","RangeError","defineProperty","configurable","enumerable","get","set","value","setReadOnlyAccessor","prototype","entropy","kurtosis","mean","median","skewness","stdev","variance","setReadOnly","x","cdf","logcdf","logpmf","t","mgf","pmf","p","quantile"],"mappings":";;g/DAuIA,SAASA,IACR,IAAIC,EACAC,EACJ,KAAOC,gBAAgBH,GACtB,OAA0B,IAArBI,UAAUC,OACP,IAAIL,EAEL,IAAIA,EAAiBI,UAAW,GAAKA,UAAW,IAExD,GAAKA,UAAUC,OAAS,CAGvB,GADAH,EAAIE,UAAW,IACTE,EAFNL,EAAIG,UAAW,IAGd,MAAM,IAAIG,UAAWC,EAAQ,QAASP,IAEvC,IAAMK,EAAWJ,GAChB,MAAM,IAAIK,UAAWC,EAAQ,QAASN,IAEvC,GAAKD,EAAIC,EACR,MAAM,IAAIO,WAAYD,EAAQ,QAASP,EAAGC,GAE7C,MACED,EAAI,EACJC,EAAI,EAkCL,OAhCAQ,EAAgBP,KAAM,IAAK,CAC1BQ,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOZ,CACP,EACDa,IAAO,SAAcC,GACpB,IAAMT,EAAWS,GAChB,MAAM,IAAIR,UAAWC,EAAQ,QAASO,IAEvC,GAAKA,EAAQb,EACZ,MAAM,IAAIO,WAAYD,EAAQ,QAASN,EAAGa,IAE3Cd,EAAIc,CACJ,IAEFL,EAAgBP,KAAM,IAAK,CAC1BQ,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOX,CACP,EACDY,IAAO,SAAcC,GACpB,IAAMT,EAAWS,GAChB,MAAM,IAAIR,UAAWC,EAAQ,QAASO,IAEvC,GAAKd,EAAIc,EACR,MAAM,IAAIN,WAAYD,EAAQ,QAASP,EAAGc,IAE3Cb,EAAIa,CACJ,IAEKZ,IACR,CAgBAa,EAAqBhB,EAAgBiB,UAAW,WAAW,WAC1D,OAAOC,EAASf,KAAKF,EAAGE,KAAKD,EAC9B,IAgBAc,EAAqBhB,EAAgBiB,UAAW,YAAY,WAC3D,OAAOE,EAAUhB,KAAKF,EAAGE,KAAKD,EAC/B,IAgBAc,EAAqBhB,EAAgBiB,UAAW,QAAQ,WACvD,OAAOG,EAAMjB,KAAKF,EAAGE,KAAKD,EAC3B,IAgBAc,EAAqBhB,EAAgBiB,UAAW,UAAU,WACzD,OAAOI,EAAQlB,KAAKF,EAAGE,KAAKD,EAC7B,IAgBAc,EAAqBhB,EAAgBiB,UAAW,YAAY,WAC3D,OAAOK,EAAUnB,KAAKF,EAAGE,KAAKD,EAC/B,IAgBAc,EAAqBhB,EAAgBiB,UAAW,SAAS,WACxD,OAAOM,EAAOpB,KAAKF,EAAGE,KAAKD,EAC5B,IAgBAc,EAAqBhB,EAAgBiB,UAAW,YAAY,WAC3D,OAAOO,EAAUrB,KAAKF,EAAGE,KAAKD,EAC/B,IAkBAuB,EAAazB,EAAgBiB,UAAW,OA5RxC,SAA6BS,GAC5B,OAAOC,EAAKD,EAAGvB,KAAKF,EAAGE,KAAKD,EAC7B,IA4SAuB,EAAazB,EAAgBiB,UAAW,UAnSxC,SAAgCS,GAC/B,OAAOE,EAAQF,EAAGvB,KAAKF,EAAGE,KAAKD,EAChC,IAmTAuB,EAAazB,EAAgBiB,UAAW,UA1SxC,SAAgCS,GAC/B,OAAOG,EAAQH,EAAGvB,KAAKF,EAAGE,KAAKD,EAChC,IA0TAuB,EAAazB,EAAgBiB,UAAW,OAjTxC,SAA6Ba,GAC5B,OAAOC,EAAKD,EAAG3B,KAAKF,EAAGE,KAAKD,EAC7B,IAiUAuB,EAAazB,EAAgBiB,UAAW,OAxTxC,SAA6BS,GAC5B,OAAOM,EAAKN,EAAGvB,KAAKF,EAAGE,KAAKD,EAC7B,IAwUAuB,EAAazB,EAAgBiB,UAAW,YA/TxC,SAAkCgB,GACjC,OAAOC,EAAUD,EAAG9B,KAAKF,EAAGE,KAAKD,EAClC"}